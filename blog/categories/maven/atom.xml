<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: maven | Rossi Oddet]]></title>
  <link href="http://roddet.github.com/blog/categories/maven/atom.xml" rel="self"/>
  <link href="http://roddet.github.com/"/>
  <updated>2014-05-21T01:43:46-04:00</updated>
  <id>http://roddet.github.com/</id>
  <author>
    <name><![CDATA[Rossi Oddet]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scala IO 2013 => De Maven à SBT]]></title>
    <link href="http://roddet.github.com/2013/10/scalaio-2013-maven-sbt/"/>
    <updated>2013-10-28T09:30:00-04:00</updated>
    <id>http://roddet.github.com/2013/10/scalaio-2013-maven-sbt</id>
    <content type="html"><![CDATA[<h2>Présentateur</h2>

<p><img class="left" src="/images/scalaio2013/speaker-stephane-manciot.jpg">
Stéphane Manciot, Architecte chez ebiznext.</p>

<ul>
<li>Twitter : <a href="https://twitter.com/smanciot">@smanciot</a></li>
<li>LinkedIn : <a href="http://www.linkedin.com/in/smanciot">http://www.linkedin.com/in/smanciot</a></li>
<li>Sa bio sur <a href="http://scala.io/speakers/stephane-manciot.html">Scala IO</a></li>
<li>La description de <a href="http://scala.io/events/de-maven-a-sbt.html">sa session ScalaIO</a></li>
</ul>


<br><br><br>


<h2>Une photo comme si vous y étiez !</h2>

<p><img class="center" src="/images/scalaio2013/stephane-manciot-maven-sbt-1.jpg"></p>

<h2>Le Talk</h2>

<p>Stéphane nous a défini ce qui serait pour lui un outil de build idéal, c'est à dire un outil qui <em>facilite la vie des développeurs</em>. Ce talk fait suite à une migration de Maven à SBT d'un projet entièrement écrit en Java. Oui pas de code Scala dans le projet !</p>

<p>Deux idées principales dans ce <em>talk</em> :</p>

<h3>Partie 1 => SBT c'est mieux que Maven</h3>

<p>SBT et Maven seront comparés sur les thèmes suivants :</p>

<ul>
<li>Plugins Maven vs tâches SBT</li>
<li>Phases Maven vs Gestion des dépendances des tâches SBT</li>
<li>Performances</li>
<li>Gestion multiprojets</li>
<li>Cross compilation pour les projets Scala</li>
<li>Gestion des dépendances</li>
</ul>


<h3>Partie 2 => On peut faire du SBT en Entreprise</h3>

<p>Voici les préconisations de Stéphane :</p>

<ul>
<li>Configurer 2 catégories de dépôt en entreprise : Ivy et Maven.</li>
<li>Une solution pour publier les versions <em>snapshots</em> et <em>releases</em> (voir le code SBT dans les slides)</li>
<li>Une publication dans Sonar avec le plugin <a href="https://github.com/ebiznext/sbt-sonar">sbt-sonar</a> avec une couverture du code via le plugin <a href="https://bitbucket.org/jmhofer/jacoco4sbt">jacoco4sbt</a></li>
</ul>


<h2>Les slides de la présentation</h2>

<iframe src="http://www.slideshare.net/slideshow/embed_code/27564746" width="600" height="500" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen> </iframe>


<h2>Ce que j'en ai pensé</h2>

<p>Une présentation intéressante qui met en évidence les différences de philosophie entre Maven et SBT. Pour ceux qui utilisent Maven au quotidien, elle montre les défauts de Maven qui ne sont pas toujours visibles lorsqu'on ne connait pas d'autres outils de build.</p>

<p>On pourra néanmoins regretter le manque d'objectivité lors de la comparaison Maven vs SBT. En effet, aucun défaut de SBT n'est cité dans les slides et à mon avis il y en a quand même :) J'ai le sentiment que la migration de Maven vers SBT de quelques projets Java chez ebiznext a surtout été motivé par la volonté d'harmoniser le système de build avec les projets scala de l'entreprise. Comme le confirmera la séance de questions/réponses, Gradle n'a par exemple pas été envisagé comme remplaçant éventuel de Maven.</p>

<p>Un dépôt Git est disponible pour illustrer ce talk <a href="https://github.com/ebiznext/maven2sbt">maven2sbt</a>.</p>

<p>J'ai lancé les 2 builds (Maven et SBT). Le build SBT est Ok, j'ai eu une erreur avec build Maven (Maven 3.1.1 et commande <em>mvn clean install</em>).</p>

<p><img class="center" src="/images/scalaio2013/stephane-manciot-maven-sbt-2.png"></p>

<p><em>Mise à jour du 29/10/2013</em></p>

<p><em>Le build Maven fonctionne bien si l'on effectue "mvn clean" suivi de "mvn install"</em></p>

<p>Quoi qu'il en soit, c'est une très bonne initiative surtout que ce build traite des problématiques de génération de code, de compilation de code groovy, etc...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manipulez le bytecode]]></title>
    <link href="http://roddet.github.com/2012/06/manipulez-le-bytecode/"/>
    <updated>2012-06-21T22:45:00-04:00</updated>
    <id>http://roddet.github.com/2012/06/manipulez-le-bytecode</id>
    <content type="html"><![CDATA[<h2>Java et la philosophie du paquet cadeau</h2>

<p>Nous le savons, avec Java, nous travaillons avec un langage compilé. Notre code écrit en Java est transformé en bytecode (stocké dans des fichiers .class) pour ensuite être exécuté par la JVM. En plus de cette notion de compilation, Java ajoute une philosophie de "packaging". Nous nous plaisons bien dans cette philosophie de packaging parce que nous développons avec de nombreuses ressources et le fait d'avoir un paquet cadeau qui représente le fruit de notre travail nous facile la tâche lorsque l'on veut l'offrir à un environnement d'exécution.</p>

<table><tr>
  <td width="30%"><img src="/images/manipbytecode/cadeau.png"/></td>
  <td width="70%">Cette philosophie du paquet cadeau a néanmoins un gros inconvénient, il n'est pas simple de le modifier même pour des ajustements minimes. Par exemple, votre équipe de test a qualifié votre livrable mais vous aurez bien voulu tracer l'exécution d'une méthode critique. Pour le faire, vous êtes traditionnellement obligé de recompiler, refaire le paquet cadeau et là vous hésitez ! Vous n'êtes jamais sûr à 100% que vous n'avez pas introduit de régression et vous savez qu'en cas de problème retirer votre code va vous obliger à refaire votre paquet cadeau pour la production.
<br/>Un autre exemple, vous avez un bug que vous ne reproduisez qu'en environnement de production, vous auriez aimé tracer l'exécution d'une méthode pour investiguer. Là aussi vous partez sur la constitution d'un nouveau cadeau avec le risque d'introduire encore plus de regression et le retour arrière ne sera pas aisé à mettre en oeuvre.</td>
</tr></table>


<br/>


<h2>Notre façon de coder influencée par le packaging</h2>

<p>Le fait de savoir qu'en production une modification du code est extremement difficile à faire passer, nous allons mettre un peu de tout et n'importe quoi dans notre application.
Nous allons notamment ajouter du code de debug comme :
<code>java
if(logger.isDebugEnabled()){
   logger.debug("Au cas où j'aurai un bug...");
}
</code>
Ou encore pour mesurer des temps d'exécution, on va ajouter du code en début et fin de méthode.
Ces parties de code qui n'ont rien avoir avec notre application, nous dépensons de l'énergie pour les écrire et surtout nous ne savons pas souvent s'ils sont pertinents. Nous essayons d'être le plus générique possible et à chaque fois nous nous faisons avoir... La trace n'est pas adapté à notre cas et nous devons modifier le code, refaire le paquet cadeau. Et pire, combien de NullPointerException nous avons dû corriger sur ces morceaux de code qui n'ont rien avoir avec le fonctionnement de notre application ?</p>

<h2>Java 5 et ses agents "secrets" pour nous aider</h2>

<p>Depuis le JDK 1.5, nous avons la possibilité d'instrumenter un programme. J'entends ici, par instrumenter, la possibilité d'ajouter des instructions à nos classes déjà compilées (le bytecode) au runtime. Cette instrumentation peut être effectuée par le biais d'un agent que l'on fournit au lancement d'une application. Un agent se présente sous la forme d'un JAR et est fourni grâce au paramètre -javaagent:.
Nous progressons dans notre problématique, avec le mécanisme des agents nous pouvons séparer le code de l'application du code nous permettant de faire nos analyses. Nous ne sommes plus obligés de modifier le paquet cadeau généré, validé par nos équipes de test. C'est une avancée intéressante, car si notre code périphérique introduit des regressions, il suffit de redémarrer l'application sans l'agent pour supprimer la regression.</p>

<h2>Notre premier agent</h2>

<p>Pour qu'un JAR puisse être utilisé comme un agent, il faut qu'il reste certaines conditions :
Avoir dans son fichier MANIFEST au moins l'attribut Premain-Class
L'attribut Premain-Class doit avoir comme valeur une classe existante qui contient au moins la méthode
``` java
public static void premain(String agentArgs, Instrumentation instr){</p>

<p>}
```
Pour créer un projet Java générant un JAR, je ne sais plus comment on fait sans Maven :-) L'exemple qui suit reste évidemment valable à condition de l'adapter à votre outil de génération de JAR (Eclipse, Netbeans, JDK, Ant, vos mains,...).</p>

<ul>
<li><p>Création du projet agent-simple
<code>
mvn archetype:generate -DgroupId=com.roddet -DartifactId=agent-simple -Dversion=1.0
</code></p></li>
<li><p>Créer une classe qui sera le point d'entrée de notre agent
```java
package com.roddet.agent.simple;</p></li>
</ul>


<p>import java.lang.instrument.Instrumentation;</p>

<p>public class MySimpleAgent {</p>

<pre><code>public static void premain(String agentArgs, Instrumentation instr){
}
</code></pre>

<p>}
<code>
Pour mettre à jour le fichier MANIFEST avec Maven on peut ajouter la configuration du plugin maven-jar-plugin comme suit :
</code> xml
<build>
  <pluginmanagement></p>

<pre><code>&lt;plugins&gt;
  &lt;plugin&gt;
    &lt;groupid&gt;org.apache.maven.plugins&lt;/groupid&gt;
    &lt;artifactid&gt;maven-jar-plugin&lt;/artifactid&gt;
    &lt;version&gt;2.4&lt;/version&gt;
    &lt;configuration&gt;
      &lt;archive&gt;
        &lt;manifestentries&gt;
          &lt;premain-class&gt;com.roddet.agent.simple.MySimpleAgent&lt;/premain-class&gt;
        &lt;/manifestentries&gt;
      &lt;/archive&gt;
    &lt;/configuration&gt;
  &lt;/plugin&gt;
&lt;/plugins&gt;
</code></pre>

<p>  </pluginmanagement>
</build>
```
Il ne reste plus qu'à écrire du code dans la méthode premain de la classe MySimpleAgent et lancer une application avec le paramètre -javaagent.</p>

<h2>Un exemple concret de l'utilisation d'un agent</h2>

<p>Pour illustrer la modification du bytecode, nous allons considérer une application basique faite avec Swing qui affiche un champ de saisie et un bouton.</p>

<p><img src="/images/manipbytecode/swing-app.png" alt="/images/manipbytecode/swing-app.png" /></p>

<p>La classe principale de cette application est la suivante :
``` java
package com.roddet.swing.app;</p>

<p>import javax.swing.<em>;
import java.awt.</em>;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;</p>

<p>public class SwingFrame extends JFrame implements ActionListener {</p>

<pre><code>private JTextField swingText = new JTextField(10);
private JButton swingBtn = new JButton("Click!");

public SwingFrame() {
    init();
}

private void init() {
    this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    swingBtn.addActionListener(this);
    this.setLayout(new GridLayout());
    this.add(swingText);
    this.add(swingBtn);
    this.pack();
}

@Override
public void actionPerformed(ActionEvent actionEvent) {

}


public static void main(String[] args) throws IOException {
    JFrame app = new SwingFrame();
    app.setVisible(true);
}
</code></pre>

<p>}
```
Lors du clic sur le bouton "Click!", la méthode actionPerformed est exécuté. Pour le moment, ce clic ne produit aucun résultat.
Nous créons un paquet "cadeau" de cette application qui s'appelle swing-app-1.0.jar.</p>

<p>Notre objectif avec cet exemple est de modifier le comportement du clic sur le bouton pour qu'il affiche du texte dans la zone de saisie sans modifier notre paquet.</p>

<p>Pour lancer l'application, il suffit d'exécuter la commande :
<code>
java -jar swing-app-1.0.jar
</code>
Pour exécuter l'application avec notre agent :
<code>
java -javaagent:agent-simple-1.0.jar -jar swing-app-1.0.jar
</code>
Pour le moment, il ne se passe rien (pas de comportement spécifique défini dans l'agent).
Pour nous assurer que le code de notre agent est bien exécuté, nous ajoutons le traditionnel System.out.println dans notre agent comme ceci :</p>

<p>``` java
public class MySimpleAgent {</p>

<pre><code>public static void premain(String agentArgs, Instrumentation instr){
  System.out.println("I'm your secret agent");
}
</code></pre>

<p>}
```
A l'exécution, la chaine de caractère s'affiche, rien de bien intéressant pour le moment.</p>

<p>La modification du bytecode d'une application passe par le mécanisme de "transformer" que l'on peut ajouter à notre objet instr de type java.lang.instrument.Instrumentation. Un transformer est une classe qui implémente l'interface java.lang.instrument.ClassFileTransformer.</p>

<p>Créons alors notre "transformer" MySimpleTransformer avec un affichage dans la console des classes sur lesquels on peut intervenir :
``` java
package com.roddet.agent.simple;</p>

<p>import java.lang.instrument.ClassFileTransformer;
import java.lang.instrument.IllegalClassFormatException;
import java.security.ProtectionDomain;</p>

<p>public class MySimpleTransformer implements ClassFileTransformer {</p>

<pre><code>@Override
public byte[] transform(ClassLoader classLoader, String className, Class aClass,
                             ProtectionDomain protectionDomain, byte[] bytes)
                                              throws IllegalClassFormatException {
  System.out.println("I can modify class : " + className);
  return bytes;
}
</code></pre>

<p>}
<code>
Et appliquons notre transformer à l'objet instr
</code> java
public class MySimpleAgent {</p>

<pre><code>public static void premain(String agentArgs, Instrumentation instr) {
    System.out.println("I'm your secret agent");
    instr.addTransformer(new MySimpleTransformer());
}
</code></pre>

<p>}
<code>
A l'exécution, on obtient :
</code>
   I'm your secret agent
   I can modify class : com/roddet/swing/app/SwingFrame
   I can modify class : javax/swing/JFrame
   I can modify class : javax/swing/WindowConstants
   I can modify class : javax/accessibility/Accessible
   I can modify class : javax/swing/RootPaneContainer
   I can modify class : javax/swing/TransferHandler$HasGetTransferHandler
   I can modify class : java/awt/Frame
   ..... (la liste est longue)
```
On remarque que l'on peut modifier non seulement notre classe mais aussi les classes du JDK chargées.
Pour modifier le bytecode d'une classe, il faut modifier le tableau byte[] retourné par la méthode transform au moment où elle est exécutée pour notre classe.</p>

<p>C'est là où ça se complique ...:-) Qu'est-ce que l'on va mettre dans ce tableau byte[] ? Comment va t-on construire un tableau de byte conforme au spécification du bytecode Java (bon magic number, version de java, bytecode, ...) ?
Heureusement plusieurs techniques/outils nous permettent de nous simplifier la tâche ou de tricher un peu.
On va commencer par la triche :-)
Nous pouvons modifier le code SwingFrame en complétant la méthode actionPerformed :
<code>java
public void actionPerformed(ActionEvent actionEvent) {
  this.swingText.setText(new Date().toString());
}
</code>
Nous pouvons récupérer le fichier SwingFrame.class correspondant et le mettre dans le répertoire de ressources (src/main/resources) du projet maven agent-simple. Ce fichier sera alors dans le classpath d'exécution de notre agent.</p>

<p>Nous pouvons modifier notre transformer comme suit pour qu'il remplace le bytecode de la classe SwingFrame par celui que l'on vient de générer :
``` java
public class MySimpleTransformer implements ClassFileTransformer {</p>

<pre><code>@Override
public byte[] transform(ClassLoader classLoader, String s, Class aClass,
                        ProtectionDomain protectionDomain, byte[] bytes)
                        throws IllegalClassFormatException {
    if (s.equals("com/roddet/swing/app/SwingFrame")) {
        try {
            bytes = getSwingFrameModifiedByteCode();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    return bytes;
}

private byte[] getSwingFrameModifiedByteCode()
                               throws IOException, URISyntaxException {
    InputStream fileInputStream = Thread.currentThread().getContextClassLoader()
                                     .getResourceAsStream("SwingFrame.class");
    ByteArrayOutputStream output = new ByteArrayOutputStream();
    byte[] buffer = new byte[1024 * 4];
    int n = 0;
    while (-1 != (n = fileInputStream.read(buffer))) {
        output.write(buffer, 0, n);
    }
    fileInputStream.close();
    return output.toByteArray();
}
</code></pre>

<p>}
```
En exécutant sans agent (java -jar swing-app-1.0.jar), un clic sur le bouton "Click" ne produit rien comme résultat.</p>

<p>Avec une exécution avec agent
<code>
java -javaagent:agent-simple-1.0.jar -jar swing-app-1.0.jar
</code>
, la date/heure courante s'affiche après un clic sur le bouton.</p>

<p>![/images/manipbytecode/swing-app-with-agent.png]</p>

<p>Le JDK 5 nous offre ainsi une flexibilité sur notre application en production. Nous pouvons modifier un ensemble de classes et les remplacer directement en production en redémarrant l'application avec un agent. En cas de regression, il suffit de retirer l'agent.</p>

<h2>Java 6 va encore plus loin</h2>

<p>Depuis Java 6, il est possible d'instrumenter l'exécution d'une application après son lancement. Le package com.sun.tools.attach a été ajouté et fournit une API permettant d'ajouter, de supprimer un agent. Pour montrer l'utilisation de cet API, nous allons créer un programme permettant de connecter un agent à un programme en cours d'exécution.</p>

<p>Créons un projet Maven agent-live-installer
<code>
mvn archetype:generate -DgroupId=com.roddet -DartifactId=agent-live-installer -Dversion=1.0
</code>
Créons une classe principale qui fait le lien entre un agent et le pid d'une application en cours d'exécution.
``` java
package com.roddet.agent;</p>

<p>import com.sun.tools.attach.VirtualMachine;</p>

<p>public class MyAgentLiveInstaller {</p>

<pre><code>public static void main(String[] args) throws Exception {
    VirtualMachine vm = null;
    try {
        // 2 parameters for this execution
        if(args.length &lt; 2) {
            throw new RuntimeException("Two parameters is mandatory : "
                                                  + "pid and agent JAR path");
        }

        String pid = args[0];
        String agent = args[1];

        System.out.println("Attaching agent " + agent
                                + " to application with pid " + pid);

        // Attach VM to running application with his pid
        vm = VirtualMachine.attach(pid);

        // load agent into target VM
        vm.loadAgent(agent);

        System.out.println("Agent loaded + " + vm.getAgentProperties());

    } finally {
        if(vm != null) {
            vm.detach();
        }
    }

}
</code></pre>

<p>}
<code>
Pour qu'un agent puisse être chargé dynamiquement, deux conditions :
la classe principale de l'agent doit avoir une méthode agentmain comme ci-dessous :
</code> java</p>

<p>public class MySimpleAgent {</p>

<pre><code>public static void premain(String agentArgs, Instrumentation instr) {
    System.out.println("I'm your secret agent");
    instr.addTransformer(new MySimpleTransformer());
}

public static void agentmain(String agentArgs, Instrumentation instr) throws
                                                   UnmodifiableClassException {
    System.out.println("I'm your dynamic secret agent");
    instr.addTransformer(new MySimpleTransformer(), true);
    instr.retransformClasses(getModifiedClasses(instr));
}

private static Class[] getModifiedClasses(Instrumentation instr) {
    List&lt;Class&lt;?&gt;&gt; modifiableClasses = new ArrayList&lt;Class&lt;?&gt;&gt; ();
    for(Class aClass : instr.getAllLoadedClasses()) {
        if(instr.isModifiableClass(aClass)){
            modifiableClasses.add(aClass);
        }
    }
    Class[] classesTab = new Class[modifiableClasses.size()];
    int i = 0;
    for (Class aClass : modifiableClasses){
        classesTab[i] = aClass;
        i++;
    }
    return classesTab;
}
</code></pre>

<p>}
```
le fichier MANIFEST doit avoir l'attribut Agent-Class. Nous pouvons l'ajouter à la configuration Maven. Nous ajoutons également les attributs Can-Redefine-Classes et Can-Retransform-Classes pour donner les droits de modifications à l'agent.</p>

<p>``` xml
<build>
  <pluginmanagement></p>

<pre><code>&lt;plugins&gt;
  &lt;plugin&gt;
    &lt;groupid&gt;org.apache.maven.plugins&lt;/groupid&gt;
    &lt;artifactid&gt;maven-jar-plugin&lt;/artifactid&gt;
    &lt;version&gt;2.4&lt;/version&gt;
    &lt;configuration&gt;
      &lt;archive&gt;
        &lt;manifestentries&gt;
          &lt;premain-class&gt;com.roddet.agent.simple.MySimpleAgent&lt;/premain-class&gt;
          &lt;agent-class&gt;com.roddet.agent.simple.MySimpleAgent&lt;/agent-class&gt;
          &lt;can-retransform-classes&gt;true&lt;/can-retransform-classes&gt;
          &lt;can-redefine-classes&gt;true&lt;/can-redefine-classes&gt;
        &lt;/manifestentries&gt;
      &lt;/archive&gt;
   &lt;/configuration&gt;
  &lt;/plugin&gt;
&lt;/plugins&gt;
</code></pre>

<p>  </pluginmanagement>
</build>
<code>
On peut exécuter l'application swing seule :
</code>
java -jar swing-app-1.0.jar
<code>
Pour avoir la liste des processus java tournant sur une machine, on peut utiliser la commande :
</code>
jps</p>

<p>   804
   1913 Jps
   1907 swing-app-1.0.jar
```
A ce stade si nous cliquons sur le bouton "Click!", il ne se passe rien.</p>

<p>Ensuite nous pouvons utiliser le programme agent-live-installer pour "attacher" un agent à un processus en cours d'exécution.
<code>
java -jar agent-live-installer-1.0.jar 1907 agent-simple-1.0.jar
</code>
Et là, sans redémarrer l'application swing-app, un clic sur bouton affiche la date/heure.
Il est également possible aussi de créer un programme qui détache un agent d'un processus.</p>

<p>Avec Java 6, nous devenons tout puissant. Nous pouvons modifier du code "en live" et retirer lorsque nous le souhaitons. La modification après le lancement de l'application a néanmoins des limites, on ne peut pas par exemple modifier la structure d'une classe.</p>

<h2>Quoi pour modifier le bytecode ?</h2>

<p>La procédure présentée précédemment permet d'adresser plusieurs cas mais elle n'est pas très pratique notamment pour instrumenter des classes dont nous n'avons pas les sources. Heureusement plusieurs outils peuvent nous aider à modifier le bytecode. Ils sont nombreux, voici les 3 plus populaires :</p>

<ul>
<li><a href="http://asm.ow2.org/">ASM</a> : propose une API de relativement bas niveau pour modifier nos classes. Il est à la base de nombreux frameworks comme Oracle TopLink, Cobertura, Groovy, JRuby, ... Une liste plus exhaustive est disponible ici.</li>
<li><a href="http://www.eclipse.org/aspectj/doc/released/progguide/index.html">AspectJ</a> : pionnier de la programmation orientée aspect, il permet de définir des comportements transverses de manière agréable (java ou xml) à une application. Il fournit un agent auquel on adjoint une configuration.</li>
<li><a href="http://www.jboss.org/byteman">Byteman</a>  : produit open source développé par JBoss qui permet de modifier le bytecode au démarrage d'une application ou sur une application en cours d'exécution. L'instrumentation d'une application se fait par le biais de règles très facile à lire et à mettre en oeuvre.</li>
</ul>


<h2>Quelques exemples avec Byteman</h2>

<p>Pour installer Byteman, télécharger puis décompresser le binaire ici.
Idéalement ajouter le répertoire [BYTEMAN_INSTALL]/bin dans le "Path" de votre système.</p>

<p>Règle 1 : tracer le clic sur le bouton "Click!"
Créer le fichier trace-click-swing-app.btm avec le contenu :
<code>
RULE trace click
CLASS com.roddet.swing.app.SwingFrame
METHOD actionPerformed(java.awt.event.ActionEvent)
IF TRUE
DO System.out.println("Click!");
ENDRULE
</code>
Lancer l'application swing-app :
<code>
java -jar swing-app-1.0.jar
</code></p>

<p><img src="/images/manipbytecode/swing-app-without-agent.png" alt="/images/manipbytecode/swing-app-without-agent.png" /></p>

<p>Un clic sur le bouton ne produit aucun résultat.</p>

<p>Utiliser la commande jps pour récupérer le pid du processus puis installer l'agent byteman avec la script bminstall.sh :
<code>
bminstall.sh 2276
</code>
Puis appliquer la règle trace-click-swing-app.btm :
<code>
bmsubmit.sh trace-click-swing-app.btm
</code>
Et là, quand on clique sur le bouton "Click!", la trace "Click!" apparait dans la console.</p>

<p>Règle 2 : mettre à jour le champ de saisie après un clic
Créer le fichier addText-swing-app.btm avec le contenu :
<code>
RULE addText on click
CLASS com.roddet.swing.app.SwingFrame
METHOD actionPerformed(java.awt.event.ActionEvent)
IF TRUE
DO $0.swingText.setText("Hello, it's magic!!")
ENDRULE
</code>
Le mot clé $0 est l'équivalent de "this".</p>

<p>L'exécution de bminstall.sh n'est nécessaire qu'un seule fois, on directement ajouter un deuxième agent.</p>

<p>Appliquer la règle addText-swing-app.btm :
<code>
bmsubmit.sh addText-swing-app.btm
</code>
Lors du clic sur le bouton, le message "Hello, it's magic!!" s'affiche.</p>

<p><img src="/images/manipbytecode/byteman-swing-app.png" alt="/images/manipbytecode/byteman-swing-app.png" /></p>

<p><a href="http://www.jboss.org/byteman">Byteman</a> permet d'aller loin dans l'écriture des règles notamment avec :
l'utilisation d'expression régulière pour définir un ensemble de classe
le choix plus précis de l'endroit à instrumenter grâce aux mots clés AT ENTRY, AT EXIT, AT LINE, AFTER READ, etc...
de retirer "à chaud" un agent chargé
de manipuler les paramètres d'entrées de méthode
une intégration avec JUnit pour nous aider à simuler des erreurs inattendues (exception due à une coupure réseau, ...)</p>

<h2>Qu'est-ce qu'on fait maintenant ?</h2>

<p>Nous avons vu qu'avec Java 5, nous étions capable de séparer le code de l'application aux problématiques transverses comme le logging. Avec Java 6, on peut effectuer des modifications de bytecode à chaud. Cette fonctionnalité est de plus en plus utilisée par des applications tierces, par exemple avec l'apparition de l'onglet "profiler" dans jvisualvm :</p>

<p><img src="/images/manipbytecode/jvisualvm-profiler.png" alt="/images/manipbytecode/jvisualvm-profiler.png" /></p>

<p>N'hésitons pas à :</p>

<ul>
<li>exploiter les possibilités de notre JVM
utiliser les outils de programmation orienté aspect comme Spring, AspectJ, etc..</li>
<li>nous servir des outils comme <a href="http://www.jboss.org/byteman">Byteman</a> pour des analyses sans devoir défaire notre paquet cadeau.</li>
</ul>


<p>Le code utilisé est disponible là : <a href="https://github.com/roddet/manip-bytecode">https://github.com/roddet/manip-bytecode</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gatling : Intégration Maven & Eclipse]]></title>
    <link href="http://roddet.github.com/2012/05/gatling-integration-maven-eclipse/"/>
    <updated>2012-05-21T22:15:00-04:00</updated>
    <id>http://roddet.github.com/2012/05/gatling-integration-maven-eclipse</id>
    <content type="html"><![CDATA[<p><img src="/images/gatling/logo.png" alt="/images/gatling/logo.png" /></p>

<p><a href="http://gatling-tool.org/">Gatling</a> permet d'effectuer des tests de charges de vos applications à base de scripts écrits en Scala.
Le nom Gatling fait référence à une mitrailleuse créée en 1861, plus de détail sur <a href="http://fr.wikipedia.org/wiki/Gatling">Wikipedia</a>. Vous l'avez compris l'objectif ici est de tirer à plein feux sur votre application.</p>

<p>L'approche utilisée peut se résumer en deux concepts : asynchrone à l'extrême et un DSL pour écrire les scripts.</p>

<h2>Asynchrone à l'extrême</h2>

<p>La plupart des autres solutions sont construites sur le modèle 1 utilisateur = 1 thread. Lors d'une requête HTTP, le thread est mis en attente en attendant la réponse. Avec un grand nombre de threads (donc d'utilisateurs), le processeur passe beaucoup de temps à changer de contexte pour trouver le thread qui n'est pas en attente.</p>

<p>Le projet s'est construit autour du <a href="http://en.wikipedia.org/wiki/Actor_model">modèle Actor</a> qui revient à la mode depuis que les fréquences des processeurs ont cessé d'augmenter et que l'on s'oriente plutôt vers la multiplication des coeurs.
Il permet de profiter pleinement la puissance du processeur.</p>

<p>L'unité de base du concept est un acteur et les acteurs communiquent entre eux par le biais de messages. Il faut donc voir un acteur comme une unité de traitement avec deux types d'interactions : une réception de message et un envoi de message. Gatling ne limite plus l'utilisation d'1 thread à un utilisateur. Après l'envoi d'une requête HTTP,  un message est posté et le thread est immédiatement disponible pour envoyer une autre. Un autre thread pourra traiter la réponse dans la pile des messages reçus. <a href="http://akka.io/">Akka</a> est le framework open source utilisé pour implémenter ce pattern. Ce choix est de plus en plus adopté par des projets émergeants (<a href="http://www.playframework.com/">Play framework</a>, <a href="https://code.google.com/p/kandash/">Kandash</a>, ...).</p>

<p>Gatling effectue des appels HTTP non bloquant à l'aide du framework <a href="https://github.com/AsyncHttpClient/async-http-client">Async Http Client</a> basé sur le client <a href="http://netty.io/">Netty</a>. Là encore on peut remarquer la similitude avec Play framework qui utilise également Netty, cette fois-ci côté serveur.
En combinant le modèle des acteurs et les appels Http non bloquants, Gatling met toutes les chances de son côté pour avoir de très bonnes performances et ça se voit !</p>

<h2>Un DSL pour écrire les scripts</h2>

<p>L'objectif de Gatling est de sortir du modèle d'outil de réalisation de script à partir d'une interface graphique pour s'opposer à des outils comme <a href="http://jmeter.apache.org/">Apache JMeter</a> et aller dans le sens des frameworks comme <a href="http://grinder.sourceforge.net/">The Grinder</a>. Le langage choisi pour l'écriture des scripts est Scala. Pas de panique, pas besoin de connaître ou de maîtriser ce langage, l'api fournie est "humainement" compréhensible, simple, concis.</p>

<p>En voici un exemple, je vous laisse juger par vous même :</p>

<p>``` scala<br/>
scenario("Mon scénario à moi tout seul")</p>

<pre><code> .exec(  
  http("requette_mapage1")  
  .get("/faces/mapage1.html")  
 )  
 .exec(  
  http("requette_mapage2")  
  .get("/faces/mapage2.html")  
  .queryParam("nom", """rossi""")  
  .check(status.is(304)  
 )  
</code></pre>

<p>```
Le fait d'utiliser un langage fortement typé comme Scala permet de détecter les erreurs de syntaxes à la compilation et d'utiliser toute la puissance de votre IDE pour organiser le code, mutualiser des bouts de script, etc...
Pour les développeurs Java, l'avantage de Scala est de pouvoir directement accéder aux API du JDK et aux différentes bibliothèques java une fois ajoutée au classpath.</p>

<h2>Installer Gatling</h2>

<p>Pour une installation/utilisation classique, vous pouvez suivre les instructions de la page : <a href="https://github.com/excilys/gatling/wiki/Getting-Started">https://github.com/excilys/gatling/wiki/Getting-Started</a>. Il suffit de télécharger puis décompresser le livrable. Vous pourrez ainsi écrire et exécuter vos scripts en vous basant sur les exemples fournies.</p>

<p>Le lien suivant explique comment enregistrer un scénario et l'exécuter : <a href="https://github.com/excilys/gatling/wiki/First-Steps-with-Gatling">https://github.com/excilys/gatling/wiki/First-Steps-with-Gatling</a>.
Dans cet article, nous allons plutôt voir comment il s'intègre dans votre IDE (Eclipse) et dans le cycle de vie de vos projets (Maven). Il serait dommage de ne pas profiter de la puissance de votre IDE pour accélérer l'écriture et la maintenance de vos scripts.</p>

<h2>Installer vos outils de développement</h2>

<p>Voici ce dont vous avez besoin, je mets en parenthèse les versions que j'ai utilisé :</p>

<ul>
<li>un JDK 6+ (1.6.0_31)</li>
<li><a href="http://www.eclipse.org/downloads/">Eclipse</a> (Eclipse Classic 3.7.2)</li>
<li><a href="http://scala-ide.org/">Scala IDE Plugin</a> (<a href="http://download.scala-ide.org/releases-29/stable/site/">http://download.scala-ide.org/releases-29/stable/site/</a>)</li>
<li><a href="http://www.eclipse.org/m2e/">M2Eclipse</a> (Indigo Update Site > Collaboration > m2e)</li>
<li><a href="http://alchim31.free.fr/m2e-scala/update-site">M2E-Scala</a></li>
</ul>


<p>J'ai dû repartir d'une version d'Eclipse "neuve" car le Scala IDE Plugin ne s'installait pas sur ma version d'Eclipse courante contenant très grand nombre de plugins installés.</p>

<h2>Créer le projet Maven</h2>

<h3>Ajouter le catalog gatling</h3>

<p>Nous allons pour cela utiliser l'archetype "gatling-highcharts-maven-archetype". Cet archetype n'étant pas présent dans le repository maven central, il faut ajouter un nouveau catalog à eclipse.</p>

<p>Allez dans le menu :
Window > Preferences > Maven > Archetypes > Add Remote Catalog...
Puis saisissez l'url : <a href="http://repository.excilys.com/content/groups/public/archetype-catalog.xml">http://repository.excilys.com/content/groups/public/archetype-catalog.xml</a></p>

<p><img src="/images/gatling/eclipse_maven_catalog.png" alt="/images/gatling/eclipse_maven_catalog.png" /></p>

<h3>Créer un projet maven à partir de l'archetype gatling</h3>

<p>File > New > Maven Project > Sélectionner l'archetype "gatling-highcharts-maven-archetype" (version 1.1.6 dans mon cas)</p>

<p><img src="/images/gatling/eclipse_maven_archetype.png" alt="/images/gatling/eclipse_maven_archetype.png" /></p>

<h2>Anatomie du projet généré</h2>

<table>
  <tr>
    <td width="30%"><img src="/images/gatling/structure_mvn.png"/></td><td>&nbsp;&nbsp;</td>
    <td width="70%">On retrouve un projet Maven classique avec un pom.xml, les sources scala dans src/main/scala, les fichiers de configuration dans src/main/resources.<br/><br/>Engine.scala est la classe principale qui lance la mitrailleuse.<br/><br/>IDEPathHelper.scala contient les différents chemins d'accès aux ressources comme les classes compilées, les simulations, les fichiers de données, etc...<br/><br/>Recorder.scala est un utilitaire qui permet d'enregistrer un scénario avec par exemple votre navigateur et de générer les scripts correspondants.<br/><br/>FooSimulation.scala une simulation qui ne fait rien. Il peut être compléter pour créer son premier scénario.<br/><br/>
gatling.conf donne la possibilité de paramétrer gatling.</td>
</table>


<h2>Générer une simulation avec le "Recorder"</h2>

<p>Le "Recorder" permet de capturer toutes les requêtes HTTP en se positionnant en proxy entre votre machine et votre réseau. Le cas d'utilisation le plus courant est celui d'enregistrer une simulation à partir d'un navigateur web en y paramétrant un proxy.</p>

<p>Pour lancer l'outil "Recorder" :</p>

<ul>
<li>Sélectionner le fichier "Recorder.scala"</li>
<li>Clic droit > Run As > Scala Application</li>
</ul>


<p><img src="/images/gatling/gatling_run_recorder.png" alt="/images/gatling/gatling_run_recorder.png" /></p>

<p>L'écran suivant se lance :</p>

<p><img src="/images/gatling/recorder.png" alt="/images/gatling/recorder.png" /></p>

<p>La partie "Network/Listening Network" sert à renseigner les ports d'écoute qui seront à paramétrer dans l'outil utilisé pour réaliser un scénario (un navigateur web par exemple). Je ne parle pas intentionnellement directement d'un navigateur web parce que vous allez pouvoir utiliser le Recorder avec n'importe quel programme qui fait des requêtes HTTP, une compilation Maven par exemple.</p>

<p>Dans le cas présent, le proxy à paramétrer sera :
* Pour du HTTP locahost:8000
* Pour du HTTPS localhost:8001</p>

<p>La partie "Output" sert à paramétrer l'endroit où sera généré le script.</p>

<p>Commencer par paramétrer l'outil qui va vous aider avec le proxy configuré. Si votre outil possède un cache, comme un navigateur web, à vous de voir si vous voulez exécuter votre simulation dans ces conditions ou vider le cache.</p>

<p>Vous pouvez ensuite cliquer sur le bouton "Start".</p>

<p><strong>Attention petit bug déroutant sur Mac OSX Lion</strong> : l'affichage par défaut du Recorder ne permet pas de voir le bouton "Start". J'ai mis un certain temps à pouvoir trouver l'astuce pour l'afficher. Il consiste à simplement agrandir la fenêtre avec le bouton "+" avec comme conséquence la disparition de quelques rubriques de la partie "Output". Ce bug est déjà corrigé dans la version 1.2.0-SNAPSHOT en cours de développement.</p>

<p>Vous êtes désormais en mode écoute sur les ports configurés pour votre machine. Si vous faites par exemple la configuration du proxy au niveau de votre connexion Wifi, vous allez pouvoir voir toutes les requêtes et réponses qui transitent entre votre outil et votre réseau.</p>

<p>Exécutons un scénario simple :</p>

<ol>
<li>Taper l'adresse "www.google.fr"</li>
<li>Lancer la recherche "JCertif 2012"</li>
</ol>


<p><img src="/images/gatling/capture_recorder.png" alt="/images/gatling/capture_recorder.png" /></p>

<p>Le premier constat que vous allez voir est que vous n'avez pas seulement 2 requêtes mais beaucoup plus. Et oui c'est ça la vraie vie, google fait de multiple appels notamment pour la complétion lors de la saisie entre autres.
Quand on réalise des tests de charge, on se rend rapidement compte qu'un scénario pourtant fonctionnellement simple peut rapidement se complexifier.
Le Recorder permet d'ajouter des TAG, c'est particulièrement utile pour séparer les différentes phases de l'enregistrement. Concrètement, les TAG ajoutés vont se transformer en commentaire entre deux enchainements de requête dans le code Scala généré.</p>

<p>Pour arrêter l'enregistrement cliquer sur "Stop !".</p>

<p>De retour dans Eclipse, il faut rafraichir le projet pour voir apparaitre le fichier source généré.</p>

<p><img src="/images/gatling/fichier_genere.png" alt="/images/gatling/fichier_genere.png" /></p>

<p>Dans mon cas, il commence par "Simulation" suivi d'une indication sur la date/heure d'enregistrement.</p>

<p>Vous pouvez le parcourir vous verrez qu'il se lit aisément malgré la complexité généré. Le code généré est fidèle à tout ce qui s'est passé sans masquer les informations.</p>

<p>A cette étape, on se retrouve avec du code dans un IDE, on peut faire tout ce que l'on veut : refactoring, suppression des appels à des serveurs que l'on ne souhaite pas tester, suppression des pauses, ajout de requêtes, variabilisation de chaine de caractères, ...</p>

<p>Dans mon cas, je vais juste renommer la classe en "SimulationGoogleJCertif" en utilisant la fonction "Refactor" d'Eclipse. Pour les développeurs venant du monde Java, vous allez remarquer que le nom du fichier va être modifié mais pas le nom de la classe. Il ne s'agit pas d'un bug (je l'ai pensé au début, honte à moi...:-)), c'est autorisé en Scala ! Mais c'est pas grave, je modifie manuellement le nom de la classe. Il faut aussi savoir que le support de Scala dans Eclipse n'a pas autant de maturité que celui de Java. Vous allez probablement comme moi rencontrer quelques bugs, mais Eclipse nous a déjà habitué aux bugs et aux plantages, donc ça ne change pas fondamentalement nos habitudes...:-)</p>

<h2>Exécuter votre simulation depuis Eclipse</h2>

<p>Pour exécuter votre simulation depuis Eclipse rien de plus simple, il faut lancer la classe Engine.scala de la même manière que le Recorder.</p>

<p>Le moteur Gatling se lance en mode interactif :</p>

<p><img src="/images/gatling/choix_simulation.png" alt="/images/gatling/choix_simulation.png" /></p>

<p>Il faut à présent suivre les instructions :</p>

<ul>
<li>Choisir la simulation : 1 dans mon cas</li>
<li>Saisir un identifiant de cette exécution si besoin, taper sur la touche Entrée sinon</li>
<li>Saisir une description si besoin, taper sur la touche Entrée sinon</li>
</ul>


<p>C'est parti !</p>

<h2>Visualiser les résultats</h2>

<p>Le résultat de la simulation est enregistré dans /target/gatling-results.</p>

<p><img src="/images/gatling/fichier_resultat.png" alt="/images/gatling/fichier_resultat.png" /></p>

<p>Le fichier le plus important est simulation.log, il contient les mesures des temps d'exécution. Il est aisément parsable pour générer des rapports.</p>

<p>Sinon vous avez un rapport sympa généré par gatling. Pour le visualiser, ouvrer le fichier "active_sessions.html" dans un navigateur web.</p>

<p><img src="/images/gatling/graphe1.png" alt="/images/gatling/graphe1.png" /></p>

<br/>


<p><img src="/images/gatling/graphe2.png" alt="/images/gatling/graphe2.png" /></p>

<h2>Gatling avec Maven en Intégration Continue</h2>

<p>Nous avons pu jusqu'ici généré un projet Maven qui lors d'un mvn install compile le code Scala. Tant qu'à faire, il est plus intéressant de pouvoir les lancer automatiquement. Deux intérêts possibles :</p>

<ul>
<li>vous disposez d'un environnement pour faire vos tests de charges, vous pouvez alors simuler un grand nombre d'utilisateurs et détecter les regressions en terme de performance. C'est bien sûr le cas idéal.</li>
<li>vous êtes dans la vrai vie, vous n'avez pas d'environnement dédié. Vous pouvez exécuter vos scripts au quotidien pour vous assurer qu'ils sont toujours valides. En effet, les modifications de votre application peuvent entrainer des changements d'url ou de paramètre, vous les détecterait en regardant les rapports.</li>
</ul>


<p>Pour exécuter Gatling depuis Maven, il y a plusieurs options :</p>

<ul>
<li>Utiliser gatling-maven-plugin : le guide d'utilisation est là <a href="https://github.com/excilys/gatling/wiki/Maven-plugin">https://github.com/excilys/gatling/wiki/Maven-plugin</a></li>
<li>Utiliser <a href="http://mojo.codehaus.org/exec-maven-plugin/">exec-maven-plugin</a> pour exécuter la classe Engine juste après sa compilation. En effet, la compilation du code Scala va générer du bytecode que l'on sait exécuter simplement avec Java. Il  est surement possible d'utiliser directement le plugin <a href="https://github.com/davidB/scala-maven-plugin">scala-maven-plugin</a>, je n'ai pas testé.</li>
</ul>


<p>Actuellement, je penche plutôt sur l'option <a href="http://mojo.codehaus.org/exec-maven-plugin/">exec-maven-plugin</a> pour les raisons suivantes :</p>

<ul>
<li>Le modèle par défaut de gatling-maven-plugin préconise de mettre les sources dans src/main/resources/simulations. Ce qui ne me parait pas logique avec le reste de l'architecture de mon projet où je mets mes sources Scala dans src/main/scala. Il est possible de configurer le plugin pour modifier le répertoire des simulations. Cela n'a pas fonctionner du premier coup dans mon cas et je n'ai pas non plus insister (c'est peut-être une erreur de ma part, à suivre...)</li>
<li>J'aime bien l'idée d'unifier le lancement de Gatling que ce soit via Eclipse ou via Maven. Cela permet par exemple de modifier la classe Engine pour ajouter des paramètres à Gatling, ou faire des traitements avant de lancer Gatling (récupérer des infos d'une base de données par exemple, etc...).</li>
</ul>


<p>Avec cette option, il y a un petit soucis en l'état. En effet, on a vu tout à l'heure que Engine lançait Gatling en mode intéractif. Hors durant notre compilation Maven nous n'aurons personne pour faire les différents choix. Heureusement nous avons accès à tout le code et nous pouvons faire de petites modifications pour modifier ce comportement, c'est aussi un peu notre métier...:-) C'est du Scala certes, ça pique aux yeux de certains, mais on s'y habitue en attendant Java 8 !</p>

<p>Suivez les étapes suivantes pour la mise en oeuvre.</p>

<h3>Modifier le fichier IDEPathHelper.scala</h3>

<p>``` scala
import scala.tools.nsc.io.File
import scala.tools.nsc.io.Path
import scala.collection.immutable.List</p>

<p>object IDEPathHelper {
  val gatlingConfUrl = getClass.getClassLoader.getResource("gatling.conf").getPath
  val projectRootDir = File(gatlingConfUrl).parents(2)
  val mavenSourcesDir = projectRootDir / "src" / "main" / "scala"
  val mavenResourcesDir = projectRootDir / "src" / "main" / "resources"
  val mavenTargetDir = projectRootDir / "target"
  val mavenBinariesDir = mavenTargetDir / "classes"
  val dataFolder = mavenResourcesDir / "data"
  val requestBodiesFolder = mavenResourcesDir / "request-bodies"
  val recorderOutputFolder = mavenSourcesDir
  val resultsFolder = mavenTargetDir / "gatling-results"</p>

<p>  val simulations:List[String] = List.fromString("com.roddet.gatling.SimulationGoogleJCertif",',')
}
```
Cette variable va nous permettre de paramétrer la liste des simulations que l'on souhaite lancer.</p>

<h3>Modifier le fichier Engine.scala</h3>

<p>```scala
import com.excilys.ebi.gatling.app.{ Options, Gatling }
import com.excilys.ebi.gatling.core.util.PathHelper.path2string</p>

<p>object Engine extends App {</p>

<p>  new Gatling(Options(</p>

<pre><code>dataFolder = Some(IDEPathHelper.dataFolder),
resultsFolder = Some(IDEPathHelper.resultsFolder),
requestBodiesFolder = Some(IDEPathHelper.requestBodiesFolder),
simulationBinariesFolder = Some(IDEPathHelper.mavenBinariesDir),
simulations = Some(IDEPathHelper.simulations))).start
</code></pre>

<p>}
```</p>

<h3>Configurer le fichier pom.xml</h3>

<p>``` xml
<build>
   ....</p>

<pre><code>&lt;plugins&gt;
  &lt;plugin&gt;
    &lt;groupId&gt;net.alchim31.maven&lt;/groupId&gt;
    &lt;artifactId&gt;scala-maven-plugin&lt;/artifactId&gt;
</code></pre>

<p>   ....</p>

<pre><code>  &lt;/plugin&gt;
  &lt;plugin&gt;
    &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
    &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;
    &lt;version&gt;1.1&lt;/version&gt;
    &lt;configuration&gt;
      &lt;mainClass&gt;Engine&lt;/mainClass&gt;
    &lt;/configuration&gt;
    &lt;executions&gt;
      &lt;execution&gt;
        &lt;phase&gt;integration-test&lt;/phase&gt;
        &lt;goals&gt;
          &lt;goal&gt;java&lt;/goal&gt;
        &lt;/goals&gt;
      &lt;/execution&gt;
    &lt;/executions&gt;
  &lt;/plugin&gt;
&lt;/plugins&gt;
</code></pre>

<p>  </build>
```
Ca y est que vous lanciez Engine depuis l'IDE ou via Maven, vous avez les simulations définies dans IDEPathHelper.scala qui sont exécutées sans utilisation du mode intéractif.</p>

<h2>Petit Bilan</h2>

<p>Gatling est simple à utiliser. Il s'intègre aisément dans le cycle de vie de vos projets existants et dans vos IDE préférés. Le fait d'utiliser du code pour les scripts permet de d'éliminer à la compilation les problèmes de syntaxe, d'avoir la main sur la personnalisation des scripts et l'organisation du code.</p>

<p>L'autre avantage énorme est qu'il consomme peu de ressources (CPU, RAM), on peut simuler un très grand nombre d'utilisateurs même avec un pc pas très performant.
Voici quelques limites (il en faut bien...) :</p>

<ul>
<li>Gatling ne supporte pour le moment que le protocole HTTP/HTTPS</li>
<li>Scala n'est pas Java surtout dans Eclipse. Le plugin Scala-Ide n'est pas aussi mature que le support de Java.</li>
<li>On peut reprocher au projet sa jeunesse mais je pense qu'en continuant sur cette lancée il y a des chances que l'on en entende de plus en plus parlé de ce projet.</li>
<li>Il n'y a pas de consolidation des mesures avec d'éventuelles données côtés serveurs. il faut tout faire à la main pour relier des événements serveurs aux événements clients.</li>
<li>gatling-maven-plugin ne propose pas pour le moment beaucoup d'options (uniquement l'exécution des scripts). Il serait intéressant par exemple d'avoir un paramétrage qui fait échouer le build maven si le script par en erreur pour l'intégration continue.</li>
</ul>


<p>Vous l'aurez vu, rien de bien méchant.
Vous pouvez retrouver des liens vers des blogs qui en parlent : <a href="https://github.com/excilys/gatling/wiki/Links">https://github.com/excilys/gatling/wiki/Links</a>.</p>

<p>Les sources de l'exemple sont disponibles dans github : <a href="https://github.com/roddet/gatling-sample">https://github.com/roddet/gatling-sample</a></p>
]]></content>
  </entry>
  
</feed>
